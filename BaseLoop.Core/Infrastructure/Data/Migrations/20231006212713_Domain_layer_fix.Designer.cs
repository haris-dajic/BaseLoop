// <auto-generated />
using System;
using BaseLoop.Core.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseLoop.Core.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20231006212713_Domain_layer_fix")]
    partial class Domain_layer_fix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0df9b19b-d257-4c0e-8e83-7560e8ca339b"),
                            Description = "Ability to see a page with a list of users alongside with search functionality.",
                            Domain = 1,
                            Name = "Search.User"
                        },
                        new
                        {
                            Id = new Guid("8129e2b5-3098-4814-b1ba-0871c796c141"),
                            Description = "Ability to see button for add user alongside with ability to create user. Required Permissions: Search.Users",
                            Domain = 1,
                            Name = "Add.User"
                        },
                        new
                        {
                            Id = new Guid("703f60de-0659-40d0-acaa-21e21ed23055"),
                            Description = "Ability to navigate to user details page and edit user. Required Permissions: Search.Users",
                            Domain = 1,
                            Name = "Edit.User"
                        },
                        new
                        {
                            Id = new Guid("7aa77320-c9f4-4dc3-a4d6-987dad84182e"),
                            Description = "Ability to see delete action alongside with ability to delete user. Required Permissions: Search.Users, Edit.User",
                            Domain = 1,
                            Name = "Delete.User"
                        },
                        new
                        {
                            Id = new Guid("19b9c1ef-67c2-4c68-86b4-dda8b5e9d0ed"),
                            Description = "Ability to navigate to user details page without ability to edit user. Required Permissions: Search.Users",
                            Domain = 1,
                            Name = "Read.User"
                        },
                        new
                        {
                            Id = new Guid("ef2a4705-91a2-407d-8702-a03264581c01"),
                            Description = "Ability to see a page with a list of roles alongside with search functionality.",
                            Domain = 2,
                            Name = "Search.Roles"
                        },
                        new
                        {
                            Id = new Guid("c63a0f51-27ee-41d4-9c8b-ca29a1f36dd3"),
                            Description = "Ability to see button for add role alongside with ability to create role. Required Permissions: Search.Roles",
                            Domain = 2,
                            Name = "Add.Role"
                        },
                        new
                        {
                            Id = new Guid("36b24253-3b02-4247-a8bc-a8e4cdacbc27"),
                            Description = "Ability to navigate to role details page and edit role. Required Permissions: Search.Roles",
                            Domain = 2,
                            Name = "Edit.Role"
                        },
                        new
                        {
                            Id = new Guid("98c83533-c119-496a-b15b-cec4e61450db"),
                            Description = "Ability to see delete action alongside with ability to delete role. Required Permissions: Search.Roles, Edit.Roles",
                            Domain = 2,
                            Name = "Delete.Role"
                        },
                        new
                        {
                            Id = new Guid("db385dca-faad-4a4d-8ae5-e73fae2287a3"),
                            Description = "Ability to navigate to role details page without ability to edit role. Required Permissions: Search.Roles",
                            Domain = 2,
                            Name = "Read.Role"
                        });
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc"),
                            Description = "System Administrator Role is a system role and represents the role with the ability to managing users and roles. This role cannot be deleted or edit since it's not a user-defined role.",
                            Name = "System.Administrator"
                        },
                        new
                        {
                            Id = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9"),
                            Description = "User Management is a system role and represents the role with the ability to manage users. This role cannot be deleted or edited since it's not a user-defined role.",
                            Name = "User.Management"
                        },
                        new
                        {
                            Id = new Guid("e1161fa0-27ed-4d7e-ba10-17a2cd295cc4"),
                            Description = "Product Management is system role and represents the role with the ability to manage products. This role cannot be deleted or edited since it's not a user-defined role.",
                            Name = "Product.Management"
                        });
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.RolePermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            PermissionId = new Guid("0df9b19b-d257-4c0e-8e83-7560e8ca339b"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("8129e2b5-3098-4814-b1ba-0871c796c141"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("703f60de-0659-40d0-acaa-21e21ed23055"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("7aa77320-c9f4-4dc3-a4d6-987dad84182e"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("19b9c1ef-67c2-4c68-86b4-dda8b5e9d0ed"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("ef2a4705-91a2-407d-8702-a03264581c01"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("c63a0f51-27ee-41d4-9c8b-ca29a1f36dd3"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("36b24253-3b02-4247-a8bc-a8e4cdacbc27"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("98c83533-c119-496a-b15b-cec4e61450db"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("db385dca-faad-4a4d-8ae5-e73fae2287a3"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        },
                        new
                        {
                            PermissionId = new Guid("0df9b19b-d257-4c0e-8e83-7560e8ca339b"),
                            RoleId = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9")
                        },
                        new
                        {
                            PermissionId = new Guid("8129e2b5-3098-4814-b1ba-0871c796c141"),
                            RoleId = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9")
                        },
                        new
                        {
                            PermissionId = new Guid("703f60de-0659-40d0-acaa-21e21ed23055"),
                            RoleId = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9")
                        },
                        new
                        {
                            PermissionId = new Guid("7aa77320-c9f4-4dc3-a4d6-987dad84182e"),
                            RoleId = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9")
                        },
                        new
                        {
                            PermissionId = new Guid("19b9c1ef-67c2-4c68-86b4-dda8b5e9d0ed"),
                            RoleId = new Guid("3f548f0f-bceb-4c5e-9fa5-5e82f8fd63c9")
                        });
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f530343-18f4-4d9d-bc0b-6375a7fe905c"),
                            Address = "Aleja Bosne Srebrene 77",
                            Birthday = new DateTime(1995, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "$2b$10$MSaUX8lTLYDVGV03kS3jF.ztL1oL2a4fJlyMBfYGO5vPJ5hd7lXdi",
                            PasswordSalt = "$2b$10$MSaUX8lTLYDVGV03kS3jF.",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0f530343-18f4-4d9d-bc0b-6375a7fe905c"),
                            RoleId = new Guid("edd3f7db-7b67-4a18-a337-3a23971b3bfc")
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.Permission", b =>
                {
                    b.HasOne("BaseLoop.Core.Domain.Identity.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.RolePermission", b =>
                {
                    b.HasOne("BaseLoop.Core.Domain.Identity.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseLoop.Core.Domain.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("BaseLoop.Core.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseLoop.Core.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseLoop.Core.Domain.Identity.Role", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
